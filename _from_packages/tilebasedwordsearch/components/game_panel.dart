// Auto-generated from game_panel.html.
// DO NOT EDIT.

library game_panel;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'package:web_ui/web_ui.dart';
import 'dart:html';
import 'package:meta/meta.dart';
import '../tilebasedwordsearch.dart';
import 'package:game_loop/game_loop_html.dart';
import 'dart:math';



// The view of game in play
// Includes:
// - Tiles
// - Score
// - Timer
class GamePanel extends WebComponent {
  /** Autogenerated from the template. */

  /** CSS class constants. */
  static Map<String, String> _css = {};

  /** This field is deprecated, use getShadowRoot instead. */
  get _root => getShadowRoot("game-panel");
  static final __html1 = new autogenerated.DivElement(), __html2 = new autogenerated.DivElement(), __shadowTemplate = new autogenerated.DocumentFragment.html('''
        <h2>Game Panel</h2>
        <canvas id="frontBuffer"></canvas>

        <div>
          <button id="pause" disabled="">Pause</button>
          <button id="end" disabled="">End game</button>
        </div>
          
        <template></template>
      ''');
  autogenerated.ButtonElement __e17, __e18;
  autogenerated.Element __e23;
  autogenerated.Template __t;

  void created_autogenerated() {
    var __root = createShadowRoot("game-panel");
    __t = new autogenerated.Template(__root);
    __root.nodes.add(__shadowTemplate.clone(true));
    __e17 = __root.nodes[5].nodes[1];
    __t.listen(__e17.onClick, ($event) { togglePause(); });
    __e18 = __root.nodes[5].nodes[3];
    __t.listen(__e18.onClick, ($event) { endGame(); });
    __e23 = __root.nodes[7];
    __t.conditional(__e23, () => game != null, (__t) {
      var __e20, __e22;
      __e20 = __html1.clone(true);
      var __binding19 = __t.contentBind(() =>  game.score , false);
      __e20.nodes.addAll([new autogenerated.Text('\n            Score: '),
          __binding19,
          new autogenerated.Text('\n          ')]);
      __e22 = __html2.clone(true);
      var __binding21 = __t.contentBind(() =>  game.gameClock.timeRemaining , false);
      __e22.nodes.addAll([new autogenerated.Text('\n            Time remaining: '),
          __binding21,
          new autogenerated.Text('\n          ')]);
    __t.addAll([new autogenerated.Text('\n          '),
        __e20,
        new autogenerated.Text('\n          '),
        __e22,
        new autogenerated.Text('\n        ')]);
    });

    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = __e17 = __e18 = __e23 = null;
  }

  /** Original code from the component. */

  Game game;
  Dictionary dictionary;
  ImageAtlas letterAtlas;
  GameLoopHtml _gameLoop;
  GameLoopTouch currentTouch;
  bool paused = false;
  CanvasElement _canvasElement;
  ButtonElement _pauseButton;
  ButtonElement _endButton;
  
  @override
  inserted() {
    _pauseButton = query('#pause');
    _endButton = query('#end');
    _canvasElement = query('#frontBuffer');
    _gameLoop = new GameLoopHtml(_canvasElement);
    // Don't lock the pointer on a click.
    _gameLoop.pointerLock.lockOnClick = false;
    _gameLoop.onUpdate = gameUpdate;
    _gameLoop.onRender = gameRender;
    _gameLoop.onTouchStart = gameTouchStart;
    _gameLoop.onTouchEnd = gameTouchEnd;
    
    enableButtons();
    
    startNewGame();
  }
  
  void startNewGame() {
    game = new Game(dictionary, _canvasElement, _gameLoop, letterAtlas);
    game.gameClock.start();
    game.done.then((_) {
      disableButtons();
    });
    _gameLoop.start();
  }
  
  void enableButtons() {
    _endButton.disabled = false;
    _pauseButton.disabled = false;
  }

  void disableButtons() {
    _endButton.disabled = true;
    _pauseButton.disabled = true;
  }
  
  void endGame() {
    // XXX: should confirm first
    game.stop();
    
    disableButtons();
    
    print('GAME ENDED');
  }

  void togglePause() {
    if (!paused) {
      game.gameClock.pause();
      _pauseButton.text = "Resume";
    } else {
      game.gameClock.restart();
      _pauseButton.text = "Pause";
    }
    paused = !paused;
  }
  
  void drawCircle(int x, int y) {
    var context = _canvasElement.context2d;
    context.beginPath();
    context.arc(x, y, 20.0, 0, 2 * PI);
    context.fillStyle = 'green';
    context.fill();
  }

  void gameUpdate(GameLoopHtml gameLoop) {
    game.board.update(currentTouch);
  }

  void gameRender(GameLoopHtml gameLoop) {
    if (game != null) {
      game.board.render();
    }
    if (currentTouch == null) {
      return;
    }
    var transform = new RectangleTransform(_canvasElement);
    currentTouch.positions.forEach((position) {
      int x = position.x;
      int y = position.y;
      if (transform.contains(x, y)) {
        int rx = transform.transformX(x);
        int ry = transform.transformY(y);
        drawCircle(rx, ry);
      }
    });
  }

  void gameTouchStart(GameLoop gameLoop, GameLoopTouch touch) {
    if (currentTouch == null) {
      currentTouch = touch;
    }
  }

  void gameTouchEnd(GameLoop gameLoop, GameLoopTouch touch) {
    if (touch == currentTouch) {
      currentTouch = null;
      String word = game.board.selectedLetters;
      if (game.attemptWord(word)) {
        print('Found word $word');
      }
    }
  }
}
//@ sourceMappingURL=game_panel.dart.map